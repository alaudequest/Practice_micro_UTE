
Position_PID_E1_307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba0  08003ba0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba8  08003ba8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000001c  08003bcc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003bcc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000962f  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001639  00000000  00000000  00029674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d219  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0e1  00000000  00000000  00049171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4016  00000000  00000000  00053252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002adc  00000000  00000000  001072b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b78 	.word	0x08003b78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003b78 	.word	0x08003b78

080001c8 <__aeabi_fmul>:
 80001c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001d0:	bf1e      	ittt	ne
 80001d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001d6:	ea92 0f0c 	teqne	r2, ip
 80001da:	ea93 0f0c 	teqne	r3, ip
 80001de:	d06f      	beq.n	80002c0 <__aeabi_fmul+0xf8>
 80001e0:	441a      	add	r2, r3
 80001e2:	ea80 0c01 	eor.w	ip, r0, r1
 80001e6:	0240      	lsls	r0, r0, #9
 80001e8:	bf18      	it	ne
 80001ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ee:	d01e      	beq.n	800022e <__aeabi_fmul+0x66>
 80001f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000200:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000204:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000208:	bf3e      	ittt	cc
 800020a:	0049      	lslcc	r1, r1, #1
 800020c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000210:	005b      	lslcc	r3, r3, #1
 8000212:	ea40 0001 	orr.w	r0, r0, r1
 8000216:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800021a:	2afd      	cmp	r2, #253	; 0xfd
 800021c:	d81d      	bhi.n	800025a <__aeabi_fmul+0x92>
 800021e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	4770      	bx	lr
 800022e:	f090 0f00 	teq	r0, #0
 8000232:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000236:	bf08      	it	eq
 8000238:	0249      	lsleq	r1, r1, #9
 800023a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800023e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000242:	3a7f      	subs	r2, #127	; 0x7f
 8000244:	bfc2      	ittt	gt
 8000246:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800024a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800024e:	4770      	bxgt	lr
 8000250:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000254:	f04f 0300 	mov.w	r3, #0
 8000258:	3a01      	subs	r2, #1
 800025a:	dc5d      	bgt.n	8000318 <__aeabi_fmul+0x150>
 800025c:	f112 0f19 	cmn.w	r2, #25
 8000260:	bfdc      	itt	le
 8000262:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000266:	4770      	bxle	lr
 8000268:	f1c2 0200 	rsb	r2, r2, #0
 800026c:	0041      	lsls	r1, r0, #1
 800026e:	fa21 f102 	lsr.w	r1, r1, r2
 8000272:	f1c2 0220 	rsb	r2, r2, #32
 8000276:	fa00 fc02 	lsl.w	ip, r0, r2
 800027a:	ea5f 0031 	movs.w	r0, r1, rrx
 800027e:	f140 0000 	adc.w	r0, r0, #0
 8000282:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000286:	bf08      	it	eq
 8000288:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800028c:	4770      	bx	lr
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000296:	bf02      	ittt	eq
 8000298:	0040      	lsleq	r0, r0, #1
 800029a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800029e:	3a01      	subeq	r2, #1
 80002a0:	d0f9      	beq.n	8000296 <__aeabi_fmul+0xce>
 80002a2:	ea40 000c 	orr.w	r0, r0, ip
 80002a6:	f093 0f00 	teq	r3, #0
 80002aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002ae:	bf02      	ittt	eq
 80002b0:	0049      	lsleq	r1, r1, #1
 80002b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002b6:	3b01      	subeq	r3, #1
 80002b8:	d0f9      	beq.n	80002ae <__aeabi_fmul+0xe6>
 80002ba:	ea41 010c 	orr.w	r1, r1, ip
 80002be:	e78f      	b.n	80001e0 <__aeabi_fmul+0x18>
 80002c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	bf18      	it	ne
 80002ca:	ea93 0f0c 	teqne	r3, ip
 80002ce:	d00a      	beq.n	80002e6 <__aeabi_fmul+0x11e>
 80002d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002d4:	bf18      	it	ne
 80002d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002da:	d1d8      	bne.n	800028e <__aeabi_fmul+0xc6>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	4770      	bx	lr
 80002e6:	f090 0f00 	teq	r0, #0
 80002ea:	bf17      	itett	ne
 80002ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002f0:	4608      	moveq	r0, r1
 80002f2:	f091 0f00 	teqne	r1, #0
 80002f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002fa:	d014      	beq.n	8000326 <__aeabi_fmul+0x15e>
 80002fc:	ea92 0f0c 	teq	r2, ip
 8000300:	d101      	bne.n	8000306 <__aeabi_fmul+0x13e>
 8000302:	0242      	lsls	r2, r0, #9
 8000304:	d10f      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000306:	ea93 0f0c 	teq	r3, ip
 800030a:	d103      	bne.n	8000314 <__aeabi_fmul+0x14c>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	bf18      	it	ne
 8000310:	4608      	movne	r0, r1
 8000312:	d108      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000314:	ea80 0001 	eor.w	r0, r0, r1
 8000318:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800031c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000320:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000324:	4770      	bx	lr
 8000326:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800032a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	; 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	3a01      	subs	r2, #1
 8000c26:	bf28      	it	cs
 8000c28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c2c:	d2ed      	bcs.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__gesf2>:
 8000d88:	f04f 3cff 	mov.w	ip, #4294967295
 8000d8c:	e006      	b.n	8000d9c <__cmpsf2+0x4>
 8000d8e:	bf00      	nop

08000d90 <__lesf2>:
 8000d90:	f04f 0c01 	mov.w	ip, #1
 8000d94:	e002      	b.n	8000d9c <__cmpsf2+0x4>
 8000d96:	bf00      	nop

08000d98 <__cmpsf2>:
 8000d98:	f04f 0c01 	mov.w	ip, #1
 8000d9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000da0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dac:	bf18      	it	ne
 8000dae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db2:	d011      	beq.n	8000dd8 <__cmpsf2+0x40>
 8000db4:	b001      	add	sp, #4
 8000db6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dba:	bf18      	it	ne
 8000dbc:	ea90 0f01 	teqne	r0, r1
 8000dc0:	bf58      	it	pl
 8000dc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc6:	bf88      	it	hi
 8000dc8:	17c8      	asrhi	r0, r1, #31
 8000dca:	bf38      	it	cc
 8000dcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dd0:	bf18      	it	ne
 8000dd2:	f040 0001 	orrne.w	r0, r0, #1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ddc:	d102      	bne.n	8000de4 <__cmpsf2+0x4c>
 8000dde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000de2:	d105      	bne.n	8000df0 <__cmpsf2+0x58>
 8000de4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de8:	d1e4      	bne.n	8000db4 <__cmpsf2+0x1c>
 8000dea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dee:	d0e1      	beq.n	8000db4 <__cmpsf2+0x1c>
 8000df0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <__aeabi_cfrcmple>:
 8000df8:	4684      	mov	ip, r0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	4661      	mov	r1, ip
 8000dfe:	e7ff      	b.n	8000e00 <__aeabi_cfcmpeq>

08000e00 <__aeabi_cfcmpeq>:
 8000e00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e02:	f7ff ffc9 	bl	8000d98 <__cmpsf2>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	bf48      	it	mi
 8000e0a:	f110 0f00 	cmnmi.w	r0, #0
 8000e0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e10 <__aeabi_fcmpeq>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff fff4 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e18:	bf0c      	ite	eq
 8000e1a:	2001      	moveq	r0, #1
 8000e1c:	2000      	movne	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmplt>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffea 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e2c:	bf34      	ite	cc
 8000e2e:	2001      	movcc	r0, #1
 8000e30:	2000      	movcs	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmple>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffe0 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e40:	bf94      	ite	ls
 8000e42:	2001      	movls	r0, #1
 8000e44:	2000      	movhi	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_fcmpge>:
 8000e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e50:	f7ff ffd2 	bl	8000df8 <__aeabi_cfrcmple>
 8000e54:	bf94      	ite	ls
 8000e56:	2001      	movls	r0, #1
 8000e58:	2000      	movhi	r0, #0
 8000e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5e:	bf00      	nop

08000e60 <__aeabi_fcmpgt>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff ffc8 	bl	8000df8 <__aeabi_cfrcmple>
 8000e68:	bf34      	ite	cc
 8000e6a:	2001      	movcc	r0, #1
 8000e6c:	2000      	movcs	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_f2iz>:
 8000e74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e7c:	d30f      	bcc.n	8000e9e <__aeabi_f2iz+0x2a>
 8000e7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e86:	d90d      	bls.n	8000ea4 <__aeabi_f2iz+0x30>
 8000e88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e94:	fa23 f002 	lsr.w	r0, r3, r2
 8000e98:	bf18      	it	ne
 8000e9a:	4240      	negne	r0, r0
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr
 8000ea4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ea8:	d101      	bne.n	8000eae <__aeabi_f2iz+0x3a>
 8000eaa:	0242      	lsls	r2, r0, #9
 8000eac:	d105      	bne.n	8000eba <__aeabi_f2iz+0x46>
 8000eae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eb2:	bf08      	it	eq
 8000eb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eb8:	4770      	bx	lr
 8000eba:	f04f 0000 	mov.w	r0, #0
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_uldivmod>:
 8000ec0:	b953      	cbnz	r3, 8000ed8 <__aeabi_uldivmod+0x18>
 8000ec2:	b94a      	cbnz	r2, 8000ed8 <__aeabi_uldivmod+0x18>
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	bf08      	it	eq
 8000ec8:	2800      	cmpeq	r0, #0
 8000eca:	bf1c      	itt	ne
 8000ecc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ed0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed4:	f000 b976 	b.w	80011c4 <__aeabi_idiv0>
 8000ed8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000edc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ee0:	f000 f806 	bl	8000ef0 <__udivmoddi4>
 8000ee4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eec:	b004      	add	sp, #16
 8000eee:	4770      	bx	lr

08000ef0 <__udivmoddi4>:
 8000ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef4:	9e08      	ldr	r6, [sp, #32]
 8000ef6:	460d      	mov	r5, r1
 8000ef8:	4604      	mov	r4, r0
 8000efa:	4688      	mov	r8, r1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14d      	bne.n	8000f9c <__udivmoddi4+0xac>
 8000f00:	428a      	cmp	r2, r1
 8000f02:	4694      	mov	ip, r2
 8000f04:	d968      	bls.n	8000fd8 <__udivmoddi4+0xe8>
 8000f06:	fab2 f282 	clz	r2, r2
 8000f0a:	b152      	cbz	r2, 8000f22 <__udivmoddi4+0x32>
 8000f0c:	fa01 f302 	lsl.w	r3, r1, r2
 8000f10:	f1c2 0120 	rsb	r1, r2, #32
 8000f14:	fa20 f101 	lsr.w	r1, r0, r1
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	ea41 0803 	orr.w	r8, r1, r3
 8000f20:	4094      	lsls	r4, r2
 8000f22:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f26:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f2a:	fa1f fe8c 	uxth.w	lr, ip
 8000f2e:	fb01 8817 	mls	r8, r1, r7, r8
 8000f32:	fb07 f00e 	mul.w	r0, r7, lr
 8000f36:	0c23      	lsrs	r3, r4, #16
 8000f38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d90a      	bls.n	8000f56 <__udivmoddi4+0x66>
 8000f40:	eb1c 0303 	adds.w	r3, ip, r3
 8000f44:	f107 35ff 	add.w	r5, r7, #4294967295
 8000f48:	f080 811e 	bcs.w	8001188 <__udivmoddi4+0x298>
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	f240 811b 	bls.w	8001188 <__udivmoddi4+0x298>
 8000f52:	3f02      	subs	r7, #2
 8000f54:	4463      	add	r3, ip
 8000f56:	1a1b      	subs	r3, r3, r0
 8000f58:	fbb3 f0f1 	udiv	r0, r3, r1
 8000f5c:	fb01 3310 	mls	r3, r1, r0, r3
 8000f60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f64:	b2a4      	uxth	r4, r4
 8000f66:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d90a      	bls.n	8000f84 <__udivmoddi4+0x94>
 8000f6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f76:	f080 8109 	bcs.w	800118c <__udivmoddi4+0x29c>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f240 8106 	bls.w	800118c <__udivmoddi4+0x29c>
 8000f80:	4464      	add	r4, ip
 8000f82:	3802      	subs	r0, #2
 8000f84:	2100      	movs	r1, #0
 8000f86:	eba4 040e 	sub.w	r4, r4, lr
 8000f8a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f8e:	b11e      	cbz	r6, 8000f98 <__udivmoddi4+0xa8>
 8000f90:	2300      	movs	r3, #0
 8000f92:	40d4      	lsrs	r4, r2
 8000f94:	e9c6 4300 	strd	r4, r3, [r6]
 8000f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0xc2>
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	f000 80ee 	beq.w	8001182 <__udivmoddi4+0x292>
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	e9c6 0500 	strd	r0, r5, [r6]
 8000fac:	4608      	mov	r0, r1
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	fab3 f183 	clz	r1, r3
 8000fb6:	2900      	cmp	r1, #0
 8000fb8:	d14a      	bne.n	8001050 <__udivmoddi4+0x160>
 8000fba:	42ab      	cmp	r3, r5
 8000fbc:	d302      	bcc.n	8000fc4 <__udivmoddi4+0xd4>
 8000fbe:	4282      	cmp	r2, r0
 8000fc0:	f200 80fc 	bhi.w	80011bc <__udivmoddi4+0x2cc>
 8000fc4:	1a84      	subs	r4, r0, r2
 8000fc6:	eb65 0303 	sbc.w	r3, r5, r3
 8000fca:	2001      	movs	r0, #1
 8000fcc:	4698      	mov	r8, r3
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d0e2      	beq.n	8000f98 <__udivmoddi4+0xa8>
 8000fd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0xa8>
 8000fd8:	b902      	cbnz	r2, 8000fdc <__udivmoddi4+0xec>
 8000fda:	deff      	udf	#255	; 0xff
 8000fdc:	fab2 f282 	clz	r2, r2
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	f040 8091 	bne.w	8001108 <__udivmoddi4+0x218>
 8000fe6:	eba1 000c 	sub.w	r0, r1, ip
 8000fea:	2101      	movs	r1, #1
 8000fec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff0:	fa1f fe8c 	uxth.w	lr, ip
 8000ff4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ff8:	fb07 0013 	mls	r0, r7, r3, r0
 8000ffc:	0c25      	lsrs	r5, r4, #16
 8000ffe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001002:	fb0e f003 	mul.w	r0, lr, r3
 8001006:	42a8      	cmp	r0, r5
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x12c>
 800100a:	eb1c 0505 	adds.w	r5, ip, r5
 800100e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001012:	d202      	bcs.n	800101a <__udivmoddi4+0x12a>
 8001014:	42a8      	cmp	r0, r5
 8001016:	f200 80ce 	bhi.w	80011b6 <__udivmoddi4+0x2c6>
 800101a:	4643      	mov	r3, r8
 800101c:	1a2d      	subs	r5, r5, r0
 800101e:	fbb5 f0f7 	udiv	r0, r5, r7
 8001022:	fb07 5510 	mls	r5, r7, r0, r5
 8001026:	fb0e fe00 	mul.w	lr, lr, r0
 800102a:	b2a4      	uxth	r4, r4
 800102c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001030:	45a6      	cmp	lr, r4
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x156>
 8001034:	eb1c 0404 	adds.w	r4, ip, r4
 8001038:	f100 35ff 	add.w	r5, r0, #4294967295
 800103c:	d202      	bcs.n	8001044 <__udivmoddi4+0x154>
 800103e:	45a6      	cmp	lr, r4
 8001040:	f200 80b6 	bhi.w	80011b0 <__udivmoddi4+0x2c0>
 8001044:	4628      	mov	r0, r5
 8001046:	eba4 040e 	sub.w	r4, r4, lr
 800104a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800104e:	e79e      	b.n	8000f8e <__udivmoddi4+0x9e>
 8001050:	f1c1 0720 	rsb	r7, r1, #32
 8001054:	408b      	lsls	r3, r1
 8001056:	fa22 fc07 	lsr.w	ip, r2, r7
 800105a:	ea4c 0c03 	orr.w	ip, ip, r3
 800105e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001062:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001066:	fbba f8f9 	udiv	r8, sl, r9
 800106a:	fa20 f307 	lsr.w	r3, r0, r7
 800106e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001072:	408d      	lsls	r5, r1
 8001074:	fa1f fe8c 	uxth.w	lr, ip
 8001078:	431d      	orrs	r5, r3
 800107a:	fa00 f301 	lsl.w	r3, r0, r1
 800107e:	fb08 f00e 	mul.w	r0, r8, lr
 8001082:	0c2c      	lsrs	r4, r5, #16
 8001084:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001088:	42a0      	cmp	r0, r4
 800108a:	fa02 f201 	lsl.w	r2, r2, r1
 800108e:	d90b      	bls.n	80010a8 <__udivmoddi4+0x1b8>
 8001090:	eb1c 0404 	adds.w	r4, ip, r4
 8001094:	f108 3aff 	add.w	sl, r8, #4294967295
 8001098:	f080 8088 	bcs.w	80011ac <__udivmoddi4+0x2bc>
 800109c:	42a0      	cmp	r0, r4
 800109e:	f240 8085 	bls.w	80011ac <__udivmoddi4+0x2bc>
 80010a2:	f1a8 0802 	sub.w	r8, r8, #2
 80010a6:	4464      	add	r4, ip
 80010a8:	1a24      	subs	r4, r4, r0
 80010aa:	fbb4 f0f9 	udiv	r0, r4, r9
 80010ae:	fb09 4410 	mls	r4, r9, r0, r4
 80010b2:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b6:	b2ad      	uxth	r5, r5
 80010b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010bc:	45a6      	cmp	lr, r4
 80010be:	d908      	bls.n	80010d2 <__udivmoddi4+0x1e2>
 80010c0:	eb1c 0404 	adds.w	r4, ip, r4
 80010c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80010c8:	d26c      	bcs.n	80011a4 <__udivmoddi4+0x2b4>
 80010ca:	45a6      	cmp	lr, r4
 80010cc:	d96a      	bls.n	80011a4 <__udivmoddi4+0x2b4>
 80010ce:	3802      	subs	r0, #2
 80010d0:	4464      	add	r4, ip
 80010d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010d6:	fba0 9502 	umull	r9, r5, r0, r2
 80010da:	eba4 040e 	sub.w	r4, r4, lr
 80010de:	42ac      	cmp	r4, r5
 80010e0:	46c8      	mov	r8, r9
 80010e2:	46ae      	mov	lr, r5
 80010e4:	d356      	bcc.n	8001194 <__udivmoddi4+0x2a4>
 80010e6:	d053      	beq.n	8001190 <__udivmoddi4+0x2a0>
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	d069      	beq.n	80011c0 <__udivmoddi4+0x2d0>
 80010ec:	ebb3 0208 	subs.w	r2, r3, r8
 80010f0:	eb64 040e 	sbc.w	r4, r4, lr
 80010f4:	fa22 f301 	lsr.w	r3, r2, r1
 80010f8:	fa04 f707 	lsl.w	r7, r4, r7
 80010fc:	431f      	orrs	r7, r3
 80010fe:	40cc      	lsrs	r4, r1
 8001100:	e9c6 7400 	strd	r7, r4, [r6]
 8001104:	2100      	movs	r1, #0
 8001106:	e747      	b.n	8000f98 <__udivmoddi4+0xa8>
 8001108:	fa0c fc02 	lsl.w	ip, ip, r2
 800110c:	f1c2 0120 	rsb	r1, r2, #32
 8001110:	fa25 f301 	lsr.w	r3, r5, r1
 8001114:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001118:	fa20 f101 	lsr.w	r1, r0, r1
 800111c:	4095      	lsls	r5, r2
 800111e:	430d      	orrs	r5, r1
 8001120:	fbb3 f1f7 	udiv	r1, r3, r7
 8001124:	fb07 3311 	mls	r3, r7, r1, r3
 8001128:	fa1f fe8c 	uxth.w	lr, ip
 800112c:	0c28      	lsrs	r0, r5, #16
 800112e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001132:	fb01 f30e 	mul.w	r3, r1, lr
 8001136:	4283      	cmp	r3, r0
 8001138:	fa04 f402 	lsl.w	r4, r4, r2
 800113c:	d908      	bls.n	8001150 <__udivmoddi4+0x260>
 800113e:	eb1c 0000 	adds.w	r0, ip, r0
 8001142:	f101 38ff 	add.w	r8, r1, #4294967295
 8001146:	d22f      	bcs.n	80011a8 <__udivmoddi4+0x2b8>
 8001148:	4283      	cmp	r3, r0
 800114a:	d92d      	bls.n	80011a8 <__udivmoddi4+0x2b8>
 800114c:	3902      	subs	r1, #2
 800114e:	4460      	add	r0, ip
 8001150:	1ac0      	subs	r0, r0, r3
 8001152:	fbb0 f3f7 	udiv	r3, r0, r7
 8001156:	fb07 0013 	mls	r0, r7, r3, r0
 800115a:	b2ad      	uxth	r5, r5
 800115c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001160:	fb03 f00e 	mul.w	r0, r3, lr
 8001164:	42a8      	cmp	r0, r5
 8001166:	d908      	bls.n	800117a <__udivmoddi4+0x28a>
 8001168:	eb1c 0505 	adds.w	r5, ip, r5
 800116c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001170:	d216      	bcs.n	80011a0 <__udivmoddi4+0x2b0>
 8001172:	42a8      	cmp	r0, r5
 8001174:	d914      	bls.n	80011a0 <__udivmoddi4+0x2b0>
 8001176:	3b02      	subs	r3, #2
 8001178:	4465      	add	r5, ip
 800117a:	1a28      	subs	r0, r5, r0
 800117c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001180:	e738      	b.n	8000ff4 <__udivmoddi4+0x104>
 8001182:	4631      	mov	r1, r6
 8001184:	4630      	mov	r0, r6
 8001186:	e707      	b.n	8000f98 <__udivmoddi4+0xa8>
 8001188:	462f      	mov	r7, r5
 800118a:	e6e4      	b.n	8000f56 <__udivmoddi4+0x66>
 800118c:	4618      	mov	r0, r3
 800118e:	e6f9      	b.n	8000f84 <__udivmoddi4+0x94>
 8001190:	454b      	cmp	r3, r9
 8001192:	d2a9      	bcs.n	80010e8 <__udivmoddi4+0x1f8>
 8001194:	ebb9 0802 	subs.w	r8, r9, r2
 8001198:	eb65 0e0c 	sbc.w	lr, r5, ip
 800119c:	3801      	subs	r0, #1
 800119e:	e7a3      	b.n	80010e8 <__udivmoddi4+0x1f8>
 80011a0:	4643      	mov	r3, r8
 80011a2:	e7ea      	b.n	800117a <__udivmoddi4+0x28a>
 80011a4:	4628      	mov	r0, r5
 80011a6:	e794      	b.n	80010d2 <__udivmoddi4+0x1e2>
 80011a8:	4641      	mov	r1, r8
 80011aa:	e7d1      	b.n	8001150 <__udivmoddi4+0x260>
 80011ac:	46d0      	mov	r8, sl
 80011ae:	e77b      	b.n	80010a8 <__udivmoddi4+0x1b8>
 80011b0:	4464      	add	r4, ip
 80011b2:	3802      	subs	r0, #2
 80011b4:	e747      	b.n	8001046 <__udivmoddi4+0x156>
 80011b6:	3b02      	subs	r3, #2
 80011b8:	4465      	add	r5, ip
 80011ba:	e72f      	b.n	800101c <__udivmoddi4+0x12c>
 80011bc:	4608      	mov	r0, r1
 80011be:	e706      	b.n	8000fce <__udivmoddi4+0xde>
 80011c0:	4631      	mov	r1, r6
 80011c2:	e6e9      	b.n	8000f98 <__udivmoddi4+0xa8>

080011c4 <__aeabi_idiv0>:
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	count =__HAL_TIM_GET_COUNTER(htim);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_TIM_IC_CaptureCallback+0x20>)
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000054 	.word	0x20000054

080011ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4){
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d110      	bne.n	800121e <HAL_GPIO_EXTI_Callback+0x32>
		if ((GPIOB -> IDR & GPIO_PIN_3) == 0) count++;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_GPIO_EXTI_Callback+0x3c>)
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x28>
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_GPIO_EXTI_Callback+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_GPIO_EXTI_Callback+0x40>)
 8001210:	6013      	str	r3, [r2, #0]
		else count--;
	}

}
 8001212:	e004      	b.n	800121e <HAL_GPIO_EXTI_Callback+0x32>
		else count--;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_GPIO_EXTI_Callback+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_GPIO_EXTI_Callback+0x40>)
 800121c:	6013      	str	r3, [r2, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40020400 	.word	0x40020400
 800122c:	20000054 	.word	0x20000054

08001230 <HAL_TIM_PeriodElapsedCallback>:
//	if (count > N) count = 0;
//	else if (count < -N) count = 0;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  	e2 = t - count;
 8001238:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001244:	6013      	str	r3, [r2, #0]
  	ei2 += e2 * 0.001;
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f9d4 	bl	80005f8 <__aeabi_f2d>
 8001250:	4604      	mov	r4, r0
 8001252:	460d      	mov	r5, r1
 8001254:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f9bb 	bl	80005d4 <__aeabi_i2d>
 800125e:	a350      	add	r3, pc, #320	; (adr r3, 80013a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff fa20 	bl	80006a8 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff f864 	bl	800033c <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fc26 	bl	8000acc <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001284:	6013      	str	r3, [r2, #0]
  	if (ei2>1000){
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	494b      	ldr	r1, [pc, #300]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fde7 	bl	8000e60 <__aeabi_fcmpgt>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x70>
  		ei2 =1000;
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800129a:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x88>
  	}
  	else if(ei2<-1000) {
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4945      	ldr	r1, [pc, #276]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fdbc 	bl	8000e24 <__aeabi_fcmplt>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x88>
  		ei2 =-1000;
 80012b2:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80012b4:	4a41      	ldr	r2, [pc, #260]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80012b6:	601a      	str	r2, [r3, #0]
  	}
  	ed2 = (e2 - pre_e2) / 0.001;
 80012b8:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f986 	bl	80005d4 <__aeabi_i2d>
 80012c8:	a335      	add	r3, pc, #212	; (adr r3, 80013a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fb15 	bl	80008fc <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fbf7 	bl	8000acc <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012e2:	6013      	str	r3, [r2, #0]
  	u2 = kp2*e2 + ki2*ei2 + kd2*ed2;
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fcf9 	bl	8000ce0 <__aeabi_i2f>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4610      	mov	r0, r2
 80012f8:	f7fe ff66 	bl	80001c8 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461c      	mov	r4, r3
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7fe ff5c 	bl	80001c8 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	4619      	mov	r1, r3
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fc2f 	bl	8000b78 <__addsf3>
 800131a:	4603      	mov	r3, r0
 800131c:	461c      	mov	r4, r3
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ff4d 	bl	80001c8 <__aeabi_fmul>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fc20 	bl	8000b78 <__addsf3>
 8001338:	4603      	mov	r3, r0
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd9a 	bl	8000e74 <__aeabi_f2iz>
 8001340:	4603      	mov	r3, r0
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001344:	6013      	str	r3, [r2, #0]
  	pre_e2 = e2;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800134c:	6013      	str	r3, [r2, #0]

  	if(u2 < 0) dir = 1;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	da03      	bge.n	800135e <HAL_TIM_PeriodElapsedCallback+0x12e>
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e003      	b.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x136>
	else dir = -1;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	601a      	str	r2, [r3, #0]
	pwr = abs(u2);
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001372:	6013      	str	r3, [r2, #0]
	if(pwr > 40) pwr = 40;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b28      	cmp	r3, #40	; 0x28
 800137a:	dd02      	ble.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x152>
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800137e:	2228      	movs	r2, #40	; 0x28
 8001380:	601a      	str	r2, [r3, #0]
	if ((pwr<8)&&(e2 !=0)){pwr=8;}
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b07      	cmp	r3, #7
 8001388:	dc06      	bgt.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x168>
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001394:	2208      	movs	r2, #8
 8001396:	601a      	str	r2, [r3, #0]

    /* USER CODE END Callback 1 */
  }
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000054 	.word	0x20000054
 80013b0:	20000044 	.word	0x20000044
 80013b4:	2000004c 	.word	0x2000004c
 80013b8:	447a0000 	.word	0x447a0000
 80013bc:	c47a0000 	.word	0xc47a0000
 80013c0:	20000048 	.word	0x20000048
 80013c4:	20000050 	.word	0x20000050
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000008 	.word	0x20000008
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	20000040 	.word	0x20000040
 80013d8:	20000038 	.word	0x20000038
 80013dc:	2000003c 	.word	0x2000003c

080013e0 <setMotor>:

void setMotor(int dir , int pwmVal){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  	if (dir == -1){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d10c      	bne.n	800140c <setMotor+0x2c>
  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,100-pwmVal);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <setMotor+0x60>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
  		GPIOB -> ODR &= ~GPIO_PIN_2;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <setMotor+0x64>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <setMotor+0x64>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6153      	str	r3, [r2, #20]
  		GPIOB -> ODR |= GPIO_PIN_2;
  	}
  	else{
  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100);
  	}
}
 800140a:	e013      	b.n	8001434 <setMotor+0x54>
  	else if (dir == 1){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10c      	bne.n	800142c <setMotor+0x4c>
  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,100-pwmVal);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <setMotor+0x60>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c
  		GPIOB -> ODR |= GPIO_PIN_2;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <setMotor+0x64>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <setMotor+0x64>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6153      	str	r3, [r2, #20]
}
 800142a:	e003      	b.n	8001434 <setMotor+0x54>
  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100);
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <setMotor+0x60>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2264      	movs	r2, #100	; 0x64
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200000a0 	.word	0x200000a0
 8001444:	40020400 	.word	0x40020400

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 fb64 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f828 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f000 f978 	bl	8001748 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001458:	f000 f8ac 	bl	80015b4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800145c:	f000 f85e 	bl	800151c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001460:	f000 f91e 	bl	80016a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001464:	2108      	movs	r1, #8
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <main+0x48>)
 8001468:	f001 fbb6 	bl	8002bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <main+0x4c>)
 800146e:	f001 faed 	bl	8002a4c <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);

  GPIOB -> ODR |= GPIO_PIN_2;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <main+0x50>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <main+0x50>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6153      	str	r3, [r2, #20]
  while (1)
  {
//	  GPIOB -> ODR ^= GPIO_PIN_2;
//	  HAL_Delay(1000);

	  setMotor(dir, pwr);
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <main+0x54>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <main+0x58>)
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffa9 	bl	80013e0 <setMotor>
 800148e:	e7f6      	b.n	800147e <main+0x36>
 8001490:	200000a0 	.word	0x200000a0
 8001494:	20000058 	.word	0x20000058
 8001498:	40020400 	.word	0x40020400
 800149c:	20000038 	.word	0x20000038
 80014a0:	2000003c 	.word	0x2000003c

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b092      	sub	sp, #72	; 0x48
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	2230      	movs	r2, #48	; 0x30
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fb58 	bl	8003b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ca:	2301      	movs	r3, #1
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ce:	2310      	movs	r3, #16
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fe66 	bl	80021ac <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014e6:	f000 f9a1 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f001 f8a0 	bl	8002648 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800150e:	f000 f98d 	bl	800182c <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3748      	adds	r7, #72	; 0x48
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_TIM2_Init+0x94>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001542:	220f      	movs	r2, #15
 8001544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_TIM2_Init+0x94>)
 800154e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_TIM2_Init+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001562:	f001 fa23 	bl	80029ac <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800156c:	f000 f95e 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM2_Init+0x94>)
 800157e:	f001 fe5f 	bl	8003240 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001588:	f000 f950 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM2_Init+0x94>)
 800159a:	f002 fa35 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f000 f942 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000058 	.word	0x20000058

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015e6:	4a2d      	ldr	r2, [pc, #180]	; (800169c <MX_TIM3_Init+0xe8>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015ec:	220f      	movs	r2, #15
 80015ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015f8:	2263      	movs	r2, #99	; 0x63
 80015fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001608:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM3_Init+0xe4>)
 800160a:	f001 f9cf 	bl	80029ac <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001614:	f000 f90a 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	4619      	mov	r1, r3
 8001624:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001626:	f001 fe0b 	bl	8003240 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001630:	f000 f8fc 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001634:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001636:	f001 fa77 	bl	8002b28 <HAL_TIM_PWM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001640:	f000 f8f4 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4619      	mov	r1, r3
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001654:	f002 f9d8 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800165e:	f000 f8e5 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001662:	2360      	movs	r3, #96	; 0x60
 8001664:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2208      	movs	r2, #8
 8001676:	4619      	mov	r1, r3
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM3_Init+0xe4>)
 800167a:	f001 fd23 	bl	80030c4 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001684:	f000 f8d2 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM3_Init+0xe4>)
 800168a:	f000 f98f 	bl	80019ac <HAL_TIM_MspPostInit>

}
 800168e:	bf00      	nop
 8001690:	3738      	adds	r7, #56	; 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000a0 	.word	0x200000a0
 800169c:	40000400 	.word	0x40000400

080016a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 fa5a 	bl	8003b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016be:	4a21      	ldr	r2, [pc, #132]	; (8001744 <MX_TIM4_Init+0xa4>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e2:	2303      	movs	r3, #3
 80016e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM4_Init+0xa0>)
 800170e:	f001 fb2b 	bl	8002d68 <HAL_TIM_Encoder_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001718:	f000 f888 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM4_Init+0xa0>)
 800172a:	f002 f96d 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001734:	f000 f87a 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000e8 	.word	0x200000e8
 8001744:	40000800 	.word	0x40000800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <MX_GPIO_Init+0xdc>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <MX_GPIO_Init+0xdc>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <MX_GPIO_Init+0xdc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <MX_GPIO_Init+0xdc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <MX_GPIO_Init+0xdc>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <MX_GPIO_Init+0xdc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_GPIO_Init+0xdc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <MX_GPIO_Init+0xdc>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_GPIO_Init+0xdc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2104      	movs	r1, #4
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <MX_GPIO_Init+0xe0>)
 80017b8:	f000 fcc8 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017bc:	2304      	movs	r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4619      	mov	r1, r3
 80017d2:	4815      	ldr	r0, [pc, #84]	; (8001828 <MX_GPIO_Init+0xe0>)
 80017d4:	f000 fb1c 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d8:	2308      	movs	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017dc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80017e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	480e      	ldr	r0, [pc, #56]	; (8001828 <MX_GPIO_Init+0xe0>)
 80017ee:	f000 fb0f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017f2:	2310      	movs	r3, #16
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4808      	ldr	r0, [pc, #32]	; (8001828 <MX_GPIO_Init+0xe0>)
 8001808:	f000 fb02 	bl	8001e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	200a      	movs	r0, #10
 8001812:	f000 fac6 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001816:	200a      	movs	r0, #10
 8001818:	f000 fadf 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40020400 	.word	0x40020400

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_MspInit+0x48>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_MspInit+0x48>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_MspInit+0x48>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_MspInit+0x48>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_MspInit+0x48>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_MspInit+0x48>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	40023800 	.word	0x40023800

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001894:	d116      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	201c      	movs	r0, #28
 80018b8:	f000 fa73 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018bc:	201c      	movs	r0, #28
 80018be:	f000 fa8c 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018c2:	e01a      	b.n	80018fa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_TIM_Base_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d115      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201d      	movs	r0, #29
 80018f0:	f000 fa57 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f4:	201d      	movs	r0, #29
 80018f6:	f000 fa70 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40000400 	.word	0x40000400

0800190c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x94>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d134      	bne.n	8001998 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x98>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001966:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001978:	2302      	movs	r3, #2
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001984:	f000 fa44 	bl	8001e10 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	201e      	movs	r0, #30
 800198e:	f000 fa08 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001992:	201e      	movs	r0, #30
 8001994:	f000 fa21 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020c00 	.word	0x40020c00

080019ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_TIM_MspPostInit+0x68>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11d      	bne.n	8001a0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_TIM_MspPostInit+0x6c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_TIM_MspPostInit+0x6c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_TIM_MspPostInit+0x6c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ea:	2301      	movs	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_TIM_MspPostInit+0x70>)
 8001a06:	f000 fa03 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f8a9 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001a72:	2010      	movs	r0, #16
 8001a74:	f000 fb82 	bl	800217c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM2_IRQHandler+0x10>)
 8001a82:	f001 fa17 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000058 	.word	0x20000058

08001a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM3_IRQHandler+0x10>)
 8001a96:	f001 fa0d 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000a0 	.word	0x200000a0

08001aa4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM4_IRQHandler+0x10>)
 8001aaa:	f001 fa03 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000e8 	.word	0x200000e8

08001ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aee:	f7ff ffe3 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f002 f815 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff fca7 	bl	8001448 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001afc:	20014000 	.word	0x20014000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001b08:	08003bb0 	.word	0x08003bb0
  ldr r2, =_sbss
 8001b0c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001b10:	20000134 	.word	0x20000134

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f923 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fe74 	bl	8001838 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f93b 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f903 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000010 	.word	0x20000010
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	20000014 	.word	0x20000014

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x20>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	20000130 	.word	0x20000130

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000130 	.word	0x20000130

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4906      	ldr	r1, [pc, #24]	; (8001c8c <__NVIC_EnableIRQ+0x34>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff2d 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff42 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff35 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e16f      	b.n	8002100 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8161 	beq.w	80020fa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d005      	beq.n	8001e50 <HAL_GPIO_Init+0x40>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d130      	bne.n	8001eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e86:	2201      	movs	r2, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 0201 	and.w	r2, r3, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d017      	beq.n	8001eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d123      	bne.n	8001f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0203 	and.w	r2, r3, #3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80bb 	beq.w	80020fa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	4b64      	ldr	r3, [pc, #400]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	4a63      	ldr	r2, [pc, #396]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f92:	6453      	str	r3, [r2, #68]	; 0x44
 8001f94:	4b61      	ldr	r3, [pc, #388]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_GPIO_Init+0x310>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_GPIO_Init+0x314>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <HAL_GPIO_Init+0x220>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a56      	ldr	r2, [pc, #344]	; (8002128 <HAL_GPIO_Init+0x318>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d02b      	beq.n	800202c <HAL_GPIO_Init+0x21c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a55      	ldr	r2, [pc, #340]	; (800212c <HAL_GPIO_Init+0x31c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d025      	beq.n	8002028 <HAL_GPIO_Init+0x218>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a54      	ldr	r2, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x320>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01f      	beq.n	8002024 <HAL_GPIO_Init+0x214>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a53      	ldr	r2, [pc, #332]	; (8002134 <HAL_GPIO_Init+0x324>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d019      	beq.n	8002020 <HAL_GPIO_Init+0x210>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_GPIO_Init+0x328>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x20c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_GPIO_Init+0x32c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x208>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a50      	ldr	r2, [pc, #320]	; (8002140 <HAL_GPIO_Init+0x330>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x204>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <HAL_GPIO_Init+0x334>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x200>
 800200c:	2308      	movs	r3, #8
 800200e:	e010      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002010:	2309      	movs	r3, #9
 8002012:	e00e      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002014:	2307      	movs	r3, #7
 8002016:	e00c      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002018:	2306      	movs	r3, #6
 800201a:	e00a      	b.n	8002032 <HAL_GPIO_Init+0x222>
 800201c:	2305      	movs	r3, #5
 800201e:	e008      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002020:	2304      	movs	r3, #4
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002024:	2303      	movs	r3, #3
 8002026:	e004      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002028:	2302      	movs	r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x222>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_GPIO_Init+0x222>
 8002030:	2300      	movs	r3, #0
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	461a      	mov	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002044:	4936      	ldr	r1, [pc, #216]	; (8002120 <HAL_GPIO_Init+0x310>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_GPIO_Init+0x338>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002076:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_GPIO_Init+0x338>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_GPIO_Init+0x338>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_GPIO_Init+0x338>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_GPIO_Init+0x338>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_GPIO_Init+0x338>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_GPIO_Init+0x338>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_GPIO_Init+0x338>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f ae88 	bne.w	8001e20 <HAL_GPIO_Init+0x10>
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40021c00 	.word	0x40021c00
 8002144:	40022000 	.word	0x40022000
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f826 	bl	80011ec <HAL_GPIO_EXTI_Callback>
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e236      	b.n	800262c <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d050      	beq.n	800226c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ca:	4b9e      	ldr	r3, [pc, #632]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d00c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d6:	4b9b      	ldr	r3, [pc, #620]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e2:	4b98      	ldr	r3, [pc, #608]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b94      	ldr	r3, [pc, #592]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d036      	beq.n	800226a <HAL_RCC_OscConfig+0xbe>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d132      	bne.n	800226a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e211      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <HAL_RCC_OscConfig+0x29c>)
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d013      	beq.n	8002242 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fce1 	bl	8001be0 <HAL_GetTick>
 800221e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002222:	f7ff fcdd 	bl	8001be0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1fb      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002234:	4b83      	ldr	r3, [pc, #524]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x76>
 8002240:	e014      	b.n	800226c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fccd 	bl	8001be0 <HAL_GetTick>
 8002246:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224a:	f7ff fcc9 	bl	8001be0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1e7      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225c:	4b79      	ldr	r3, [pc, #484]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x9e>
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d077      	beq.n	8002368 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002278:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002284:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228c:	2b08      	cmp	r3, #8
 800228e:	d126      	bne.n	80022de <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002290:	4b6c      	ldr	r3, [pc, #432]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d120      	bne.n	80022de <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229c:	4b69      	ldr	r3, [pc, #420]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_OscConfig+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e1bb      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	21f8      	movs	r1, #248	; 0xf8
 80022c2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	69b9      	ldr	r1, [r7, #24]
 80022c6:	fa91 f1a1 	rbit	r1, r1
 80022ca:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	fab1 f181 	clz	r1, r1
 80022d2:	b2c9      	uxtb	r1, r1
 80022d4:	408b      	lsls	r3, r1
 80022d6:	495b      	ldr	r1, [pc, #364]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022dc:	e044      	b.n	8002368 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d02a      	beq.n	800233c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e6:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_OscConfig+0x2a0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fc78 	bl	8001be0 <HAL_GetTick>
 80022f0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff fc74 	bl	8001be0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e192      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	21f8      	movs	r1, #248	; 0xf8
 8002320:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	fa91 f1a1 	rbit	r1, r1
 8002328:	60f9      	str	r1, [r7, #12]
  return result;
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	fab1 f181 	clz	r1, r1
 8002330:	b2c9      	uxtb	r1, r1
 8002332:	408b      	lsls	r3, r1
 8002334:	4943      	ldr	r1, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
 800233a:	e015      	b.n	8002368 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x2a0>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fc4d 	bl	8001be0 <HAL_GetTick>
 8002346:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234a:	f7ff fc49 	bl	8001be0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e167      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d030      	beq.n	80023d6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d016      	beq.n	80023aa <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_OscConfig+0x2a4>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7ff fc2d 	bl	8001be0 <HAL_GetTick>
 8002386:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238a:	f7ff fc29 	bl	8001be0 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e147      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239c:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x1de>
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_OscConfig+0x2a4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7ff fc16 	bl	8001be0 <HAL_GetTick>
 80023b4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff fc12 	bl	8001be0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e130      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d110      	bne.n	8002418 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_RCC_OscConfig+0x2a8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_RCC_OscConfig+0x2a8>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_OscConfig+0x2a8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d122      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_OscConfig+0x2a8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_RCC_OscConfig+0x2a8>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243c:	f7ff fbd0 	bl	8001be0 <HAL_GetTick>
 8002440:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	e012      	b.n	800246a <HAL_RCC_OscConfig+0x2be>
 8002444:	40023800 	.word	0x40023800
 8002448:	40023802 	.word	0x40023802
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
 8002454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002458:	f7ff fbc2 	bl	8001be0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0e0      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b72      	ldr	r3, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x488>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x48c>)
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d015      	beq.n	80024b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7ff fbaa 	bl	8001be0 <HAL_GetTick>
 800248c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7ff fba6 	bl	8001be0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0c2      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ee      	beq.n	8002490 <HAL_RCC_OscConfig+0x2e4>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7ff fb94 	bl	8001be0 <HAL_GetTick>
 80024b8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7ff fb90 	bl	8001be0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0ac      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d2:	4b5a      	ldr	r3, [pc, #360]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ee      	bne.n	80024bc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b55      	ldr	r3, [pc, #340]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a54      	ldr	r2, [pc, #336]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8097 	beq.w	800262a <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d061      	beq.n	80025cc <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d146      	bne.n	800259e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCC_OscConfig+0x494>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fb63 	bl	8001be0 <HAL_GetTick>
 800251a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff fb5f 	bl	8001be0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b64      	cmp	r3, #100	; 0x64
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e07d      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002530:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x490>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x490>)
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <HAL_RCC_OscConfig+0x498>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	69d1      	ldr	r1, [r2, #28]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6a12      	ldr	r2, [r2, #32]
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002552:	0192      	lsls	r2, r2, #6
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800255a:	0612      	lsls	r2, r2, #24
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002562:	0852      	lsrs	r2, r2, #1
 8002564:	3a01      	subs	r2, #1
 8002566:	0412      	lsls	r2, r2, #16
 8002568:	430a      	orrs	r2, r1
 800256a:	4934      	ldr	r1, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x490>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x494>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff fb33 	bl	8001be0 <HAL_GetTick>
 800257a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff fb2f 	bl	8001be0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e04d      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x490>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x3d2>
 800259c:	e045      	b.n	800262a <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_OscConfig+0x494>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb1c 	bl	8001be0 <HAL_GetTick>
 80025a8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fb18 	bl	8001be0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e036      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x400>
 80025ca:	e02e      	b.n	800262a <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e029      	b.n	800262c <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x490>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d11c      	bne.n	8002626 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d115      	bne.n	8002626 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d10d      	bne.n	8002626 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40007000 	.word	0x40007000
 8002638:	40023870 	.word	0x40023870
 800263c:	40023800 	.word	0x40023800
 8002640:	42470060 	.word	0x42470060
 8002644:	f0bc8000 	.word	0xf0bc8000

08002648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d2      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b6b      	ldr	r3, [pc, #428]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d90c      	bls.n	8002684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b66      	ldr	r3, [pc, #408]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0be      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a55      	ldr	r2, [pc, #340]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4950      	ldr	r1, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d040      	beq.n	8002760 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d115      	bne.n	800271e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e085      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b44      	ldr	r3, [pc, #272]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e079      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e071      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4939      	ldr	r1, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff fa56 	bl	8001be0 <HAL_GetTick>
 8002734:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7ff fa52 	bl	8001be0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e059      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e03c      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	491b      	ldr	r1, [pc, #108]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4913      	ldr	r1, [pc, #76]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80027c6:	f000 f82b 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d4:	22f0      	movs	r2, #240	; 0xf0
 80027d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	fa92 f2a2 	rbit	r2, r2
 80027de:	60fa      	str	r2, [r7, #12]
  return result;
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	40d3      	lsrs	r3, r2
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1cc>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	fa21 f303 	lsr.w	r3, r1, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1d0>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1d4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f9ae 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00
 8002810:	40023800 	.word	0x40023800
 8002814:	08003b90 	.word	0x08003b90
 8002818:	20000010 	.word	0x20000010
 800281c:	20000014 	.word	0x20000014

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002824:	b090      	sub	sp, #64	; 0x40
 8002826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
 800282c:	2300      	movs	r3, #0
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002830:	2300      	movs	r3, #0
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d00d      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x40>
 8002844:	2b08      	cmp	r3, #8
 8002846:	f200 80a2 	bhi.w	800298e <HAL_RCC_GetSysClockFreq+0x16e>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x34>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d003      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x3a>
 8002852:	e09c      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002858:	e09c      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800285e:	e099      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d027      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	2200      	movs	r2, #0
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	627a      	str	r2, [r7, #36]	; 0x24
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002888:	2100      	movs	r1, #0
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800288c:	fb03 f201 	mul.w	r2, r3, r1
 8002890:	2300      	movs	r3, #0
 8002892:	fb00 f303 	mul.w	r3, r0, r3
 8002896:	4413      	add	r3, r2
 8002898:	4a43      	ldr	r2, [pc, #268]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800289a:	fba0 2102 	umull	r2, r1, r0, r2
 800289e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80028a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80028a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a4:	4413      	add	r3, r2
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	2200      	movs	r2, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	61fa      	str	r2, [r7, #28]
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028b8:	f7fe fb02 	bl	8000ec0 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c4:	e055      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	099b      	lsrs	r3, r3, #6
 80028cc:	2200      	movs	r2, #0
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	617a      	str	r2, [r7, #20]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028d8:	f04f 0b00 	mov.w	fp, #0
 80028dc:	4652      	mov	r2, sl
 80028de:	465b      	mov	r3, fp
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0159      	lsls	r1, r3, #5
 80028ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ee:	0150      	lsls	r0, r2, #5
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	ebb2 080a 	subs.w	r8, r2, sl
 80028f8:	eb63 090b 	sbc.w	r9, r3, fp
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002908:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800290c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002910:	ebb2 0408 	subs.w	r4, r2, r8
 8002914:	eb63 0509 	sbc.w	r5, r3, r9
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	00eb      	lsls	r3, r5, #3
 8002922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002926:	00e2      	lsls	r2, r4, #3
 8002928:	4614      	mov	r4, r2
 800292a:	461d      	mov	r5, r3
 800292c:	eb14 030a 	adds.w	r3, r4, sl
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	eb45 030b 	adc.w	r3, r5, fp
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002944:	4629      	mov	r1, r5
 8002946:	028b      	lsls	r3, r1, #10
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	4604      	mov	r4, r0
 800294e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002952:	4601      	mov	r1, r0
 8002954:	028a      	lsls	r2, r1, #10
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	2200      	movs	r2, #0
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	60fa      	str	r2, [r7, #12]
 8002962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002966:	f7fe faab 	bl	8000ec0 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4613      	mov	r3, r2
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	3301      	adds	r3, #1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002996:	4618      	mov	r0, r3
 8002998:	3740      	adds	r7, #64	; 0x40
 800299a:	46bd      	mov	sp, r7
 800299c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	017d7840 	.word	0x017d7840

080029ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e041      	b.n	8002a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe ff56 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f000 fd08 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d001      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e04e      	b.n	8002b02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_TIM_Base_Start_IT+0xc0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d01d      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0x80>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d111      	bne.n	8002af0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d010      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	e007      	b.n	8002b00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40000800 	.word	0x40000800
 8002b18:	40000c00 	.word	0x40000c00
 8002b1c:	40010400 	.word	0x40010400
 8002b20:	40014000 	.word	0x40014000
 8002b24:	40001800 	.word	0x40001800

08002b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e041      	b.n	8002bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f839 	bl	8002bc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 fc4a 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_TIM_PWM_Start+0x24>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e022      	b.n	8002c42 <HAL_TIM_PWM_Start+0x6a>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d109      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x3e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e015      	b.n	8002c42 <HAL_TIM_PWM_Start+0x6a>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d109      	bne.n	8002c30 <HAL_TIM_PWM_Start+0x58>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e008      	b.n	8002c42 <HAL_TIM_PWM_Start+0x6a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07c      	b.n	8002d44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_TIM_PWM_Start+0x82>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c58:	e013      	b.n	8002c82 <HAL_TIM_PWM_Start+0xaa>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d104      	bne.n	8002c6a <HAL_TIM_PWM_Start+0x92>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	e00b      	b.n	8002c82 <HAL_TIM_PWM_Start+0xaa>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0xa2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c78:	e003      	b.n	8002c82 <HAL_TIM_PWM_Start+0xaa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2201      	movs	r2, #1
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fe98 	bl	80039c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <HAL_TIM_PWM_Start+0x174>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0xcc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <HAL_TIM_PWM_Start+0x178>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_PWM_Start+0xd0>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_TIM_PWM_Start+0xd2>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_TIM_PWM_Start+0x174>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d01d      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_TIM_PWM_Start+0x17c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_TIM_PWM_Start+0x180>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_TIM_PWM_Start+0x184>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <HAL_TIM_PWM_Start+0x178>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_TIM_PWM_Start+0x188>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x136>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_TIM_PWM_Start+0x18c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d010      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	e007      	b.n	8002d42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40010400 	.word	0x40010400
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40001800 	.word	0x40001800

08002d68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e097      	b.n	8002eac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fe fdbb 	bl	800190c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dac:	f023 0307 	bic.w	r3, r3, #7
 8002db0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f000 fb1f 	bl	8003400 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e08:	f023 030c 	bic.w	r3, r3, #12
 8002e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4313      	orrs	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	011a      	lsls	r2, r3, #4
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	031b      	lsls	r3, r3, #12
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002e4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0202 	mvn.w	r2, #2
 8002ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe f966 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa62 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa68 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0204 	mvn.w	r2, #4
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe f93c 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa38 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa3e 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0208 	mvn.w	r2, #8
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f912 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa0e 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa14 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0210 	mvn.w	r2, #16
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f8e8 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f9e4 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f9ea 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0201 	mvn.w	r2, #1
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe f8fc 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fd55 	bl	8003b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9ae 	bl	80033ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b20      	cmp	r3, #32
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0220 	mvn.w	r2, #32
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fd20 	bl	8003afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0ac      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x174>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	f200 809f 	bhi.w	800322c <HAL_TIM_PWM_ConfigChannel+0x168>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003129 	.word	0x08003129
 80030f8:	0800322d 	.word	0x0800322d
 80030fc:	0800322d 	.word	0x0800322d
 8003100:	0800322d 	.word	0x0800322d
 8003104:	08003169 	.word	0x08003169
 8003108:	0800322d 	.word	0x0800322d
 800310c:	0800322d 	.word	0x0800322d
 8003110:	0800322d 	.word	0x0800322d
 8003114:	080031ab 	.word	0x080031ab
 8003118:	0800322d 	.word	0x0800322d
 800311c:	0800322d 	.word	0x0800322d
 8003120:	0800322d 	.word	0x0800322d
 8003124:	080031eb 	.word	0x080031eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa04 	bl	800353c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6999      	ldr	r1, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	619a      	str	r2, [r3, #24]
      break;
 8003166:	e062      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fa54 	bl	800361c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6999      	ldr	r1, [r3, #24]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	619a      	str	r2, [r3, #24]
      break;
 80031a8:	e041      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 faa7 	bl	8003704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0208 	orr.w	r2, r2, #8
 80031c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0204 	bic.w	r2, r2, #4
 80031d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
      break;
 80031e8:	e021      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fafb 	bl	80037ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69d9      	ldr	r1, [r3, #28]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	61da      	str	r2, [r3, #28]
      break;
 800322a:	e000      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800322c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e0b3      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x180>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003290:	d03e      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0xd0>
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	f200 8087 	bhi.w	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329e:	f000 8085 	beq.w	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d87f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d01a      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xa2>
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d87b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d050      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x116>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d877      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d03c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0xf6>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d873      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d058      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x136>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d86f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d064      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x156>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d86b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d060      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x156>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d867      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05c      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x156>
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d05a      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032e0:	e062      	b.n	80033a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f000 fb46 	bl	8003982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003304:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	609a      	str	r2, [r3, #8]
      break;
 800330e:	e04e      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f000 fb2f 	bl	8003982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003332:	609a      	str	r2, [r3, #8]
      break;
 8003334:	e03b      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	f000 faa6 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2150      	movs	r1, #80	; 0x50
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fafd 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003354:	e02b      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	461a      	mov	r2, r3
 8003364:	f000 fac4 	bl	80038f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2160      	movs	r1, #96	; 0x60
 800336e:	4618      	mov	r0, r3
 8003370:	f000 faed 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003374:	e01b      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	461a      	mov	r2, r3
 8003384:	f000 fa86 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fadd 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003394:	e00b      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4610      	mov	r0, r2
 80033a2:	f000 fad4 	bl	800394e <TIM_ITRx_SetConfig>
        break;
 80033a6:	e002      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
	...

08003400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a3f      	ldr	r2, [pc, #252]	; (8003510 <TIM_Base_SetConfig+0x110>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d00f      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <TIM_Base_SetConfig+0x114>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <TIM_Base_SetConfig+0x118>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3a      	ldr	r2, [pc, #232]	; (800351c <TIM_Base_SetConfig+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a39      	ldr	r2, [pc, #228]	; (8003520 <TIM_Base_SetConfig+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <TIM_Base_SetConfig+0x110>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003460:	d027      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <TIM_Base_SetConfig+0x114>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d023      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <TIM_Base_SetConfig+0x118>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <TIM_Base_SetConfig+0x11c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <TIM_Base_SetConfig+0x120>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d017      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a27      	ldr	r2, [pc, #156]	; (8003524 <TIM_Base_SetConfig+0x124>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <TIM_Base_SetConfig+0x128>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a25      	ldr	r2, [pc, #148]	; (800352c <TIM_Base_SetConfig+0x12c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <TIM_Base_SetConfig+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <TIM_Base_SetConfig+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a22      	ldr	r2, [pc, #136]	; (8003538 <TIM_Base_SetConfig+0x138>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <TIM_Base_SetConfig+0x110>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <TIM_Base_SetConfig+0x120>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40010000 	.word	0x40010000
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40010400 	.word	0x40010400
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800
 8003530:	40001800 	.word	0x40001800
 8003534:	40001c00 	.word	0x40001c00
 8003538:	40002000 	.word	0x40002000

0800353c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0201 	bic.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <TIM_OC1_SetConfig+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC1_SetConfig+0x64>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <TIM_OC1_SetConfig+0xdc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10c      	bne.n	80035ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0308 	bic.w	r3, r3, #8
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <TIM_OC1_SetConfig+0xd8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_OC1_SetConfig+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <TIM_OC1_SetConfig+0xdc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d111      	bne.n	80035ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40010400 	.word	0x40010400

0800361c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0210 	bic.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <TIM_OC2_SetConfig+0xe0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_OC2_SetConfig+0x68>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a20      	ldr	r2, [pc, #128]	; (8003700 <TIM_OC2_SetConfig+0xe4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10d      	bne.n	80036a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <TIM_OC2_SetConfig+0xe0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC2_SetConfig+0x94>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <TIM_OC2_SetConfig+0xe4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d113      	bne.n	80036d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010400 	.word	0x40010400

08003704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <TIM_OC3_SetConfig+0xe0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_OC3_SetConfig+0x66>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <TIM_OC3_SetConfig+0xe4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10d      	bne.n	8003786 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <TIM_OC3_SetConfig+0xe0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC3_SetConfig+0x92>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <TIM_OC3_SetConfig+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40010400 	.word	0x40010400

080037ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <TIM_OC4_SetConfig+0xa0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_OC4_SetConfig+0x68>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <TIM_OC4_SetConfig+0xa4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d109      	bne.n	8003868 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800385a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f023 0210 	bic.w	r2, r3, #16
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800391a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	031b      	lsls	r3, r3, #12
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800392c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	f043 0307 	orr.w	r3, r3, #7
 8003970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b087      	sub	sp, #28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800399c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2201      	movs	r2, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e05a      	b.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d01d      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	2600      	movs	r6, #0
 8003b24:	4d0c      	ldr	r5, [pc, #48]	; (8003b58 <__libc_init_array+0x38>)
 8003b26:	4c0d      	ldr	r4, [pc, #52]	; (8003b5c <__libc_init_array+0x3c>)
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	f000 f822 	bl	8003b78 <_init>
 8003b34:	2600      	movs	r6, #0
 8003b36:	4d0a      	ldr	r5, [pc, #40]	; (8003b60 <__libc_init_array+0x40>)
 8003b38:	4c0a      	ldr	r4, [pc, #40]	; (8003b64 <__libc_init_array+0x44>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b48:	4798      	blx	r3
 8003b4a:	3601      	adds	r6, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b52:	4798      	blx	r3
 8003b54:	3601      	adds	r6, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	08003ba8 	.word	0x08003ba8
 8003b5c:	08003ba8 	.word	0x08003ba8
 8003b60:	08003ba8 	.word	0x08003ba8
 8003b64:	08003bac 	.word	0x08003bac

08003b68 <memset>:
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4402      	add	r2, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <_init>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr

08003b84 <_fini>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr
